// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/10/2018 17:37:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU16BIT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU16BIT_vlg_sample_tst(
	a,
	b,
	opcode,
	sampler_tx
);
input [15:0] a;
input [15:0] b;
input [2:0] opcode;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU16BIT_vlg_check_tst (
	Overflow,
	RESULT,
	sampler_rx
);
input  Overflow;
input [15:0] RESULT;
input sampler_rx;

reg  Overflow_expected;
reg [15:0] RESULT_expected;

reg  Overflow_prev;
reg [15:0] RESULT_prev;

reg  Overflow_expected_prev;
reg [15:0] RESULT_expected_prev;

reg  last_Overflow_exp;
reg [15:0] last_RESULT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Overflow_prev = Overflow;
	RESULT_prev = RESULT;
end

// update expected /o prevs

always @(trigger)
begin
	Overflow_expected_prev = Overflow_expected;
	RESULT_expected_prev = RESULT_expected;
end


// expected RESULT[ 15 ]
initial
begin
	RESULT_expected[15] = 1'bX;
end 
// expected RESULT[ 14 ]
initial
begin
	RESULT_expected[14] = 1'bX;
end 
// expected RESULT[ 13 ]
initial
begin
	RESULT_expected[13] = 1'bX;
end 
// expected RESULT[ 12 ]
initial
begin
	RESULT_expected[12] = 1'bX;
end 
// expected RESULT[ 11 ]
initial
begin
	RESULT_expected[11] = 1'bX;
end 
// expected RESULT[ 10 ]
initial
begin
	RESULT_expected[10] = 1'bX;
end 
// expected RESULT[ 9 ]
initial
begin
	RESULT_expected[9] = 1'bX;
end 
// expected RESULT[ 8 ]
initial
begin
	RESULT_expected[8] = 1'bX;
end 
// expected RESULT[ 7 ]
initial
begin
	RESULT_expected[7] = 1'bX;
end 
// expected RESULT[ 6 ]
initial
begin
	RESULT_expected[6] = 1'bX;
end 
// expected RESULT[ 5 ]
initial
begin
	RESULT_expected[5] = 1'bX;
end 
// expected RESULT[ 4 ]
initial
begin
	RESULT_expected[4] = 1'bX;
end 
// expected RESULT[ 3 ]
initial
begin
	RESULT_expected[3] = 1'bX;
end 
// expected RESULT[ 2 ]
initial
begin
	RESULT_expected[2] = 1'bX;
end 
// expected RESULT[ 1 ]
initial
begin
	RESULT_expected[1] = 1'bX;
end 
// expected RESULT[ 0 ]
initial
begin
	RESULT_expected[0] = 1'bX;
end 

// expected Overflow
initial
begin
	Overflow_expected = 1'bX;
end 
// generate trigger
always @(Overflow_expected or Overflow or RESULT_expected or RESULT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Overflow = %b | expected RESULT = %b | ",Overflow_expected_prev,RESULT_expected_prev);
	$display("| real Overflow = %b | real RESULT = %b | ",Overflow_prev,RESULT_prev);
`endif
	if (
		( Overflow_expected_prev !== 1'bx ) && ( Overflow_prev !== Overflow_expected_prev )
		&& ((Overflow_expected_prev !== last_Overflow_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Overflow_expected_prev);
		$display ("     Real value = %b", Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Overflow_exp = Overflow_expected_prev;
	end
	if (
		( RESULT_expected_prev[0] !== 1'bx ) && ( RESULT_prev[0] !== RESULT_expected_prev[0] )
		&& ((RESULT_expected_prev[0] !== last_RESULT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[0] = RESULT_expected_prev[0];
	end
	if (
		( RESULT_expected_prev[1] !== 1'bx ) && ( RESULT_prev[1] !== RESULT_expected_prev[1] )
		&& ((RESULT_expected_prev[1] !== last_RESULT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[1] = RESULT_expected_prev[1];
	end
	if (
		( RESULT_expected_prev[2] !== 1'bx ) && ( RESULT_prev[2] !== RESULT_expected_prev[2] )
		&& ((RESULT_expected_prev[2] !== last_RESULT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[2] = RESULT_expected_prev[2];
	end
	if (
		( RESULT_expected_prev[3] !== 1'bx ) && ( RESULT_prev[3] !== RESULT_expected_prev[3] )
		&& ((RESULT_expected_prev[3] !== last_RESULT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[3] = RESULT_expected_prev[3];
	end
	if (
		( RESULT_expected_prev[4] !== 1'bx ) && ( RESULT_prev[4] !== RESULT_expected_prev[4] )
		&& ((RESULT_expected_prev[4] !== last_RESULT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[4] = RESULT_expected_prev[4];
	end
	if (
		( RESULT_expected_prev[5] !== 1'bx ) && ( RESULT_prev[5] !== RESULT_expected_prev[5] )
		&& ((RESULT_expected_prev[5] !== last_RESULT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[5] = RESULT_expected_prev[5];
	end
	if (
		( RESULT_expected_prev[6] !== 1'bx ) && ( RESULT_prev[6] !== RESULT_expected_prev[6] )
		&& ((RESULT_expected_prev[6] !== last_RESULT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[6] = RESULT_expected_prev[6];
	end
	if (
		( RESULT_expected_prev[7] !== 1'bx ) && ( RESULT_prev[7] !== RESULT_expected_prev[7] )
		&& ((RESULT_expected_prev[7] !== last_RESULT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[7] = RESULT_expected_prev[7];
	end
	if (
		( RESULT_expected_prev[8] !== 1'bx ) && ( RESULT_prev[8] !== RESULT_expected_prev[8] )
		&& ((RESULT_expected_prev[8] !== last_RESULT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[8] = RESULT_expected_prev[8];
	end
	if (
		( RESULT_expected_prev[9] !== 1'bx ) && ( RESULT_prev[9] !== RESULT_expected_prev[9] )
		&& ((RESULT_expected_prev[9] !== last_RESULT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[9] = RESULT_expected_prev[9];
	end
	if (
		( RESULT_expected_prev[10] !== 1'bx ) && ( RESULT_prev[10] !== RESULT_expected_prev[10] )
		&& ((RESULT_expected_prev[10] !== last_RESULT_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[10] = RESULT_expected_prev[10];
	end
	if (
		( RESULT_expected_prev[11] !== 1'bx ) && ( RESULT_prev[11] !== RESULT_expected_prev[11] )
		&& ((RESULT_expected_prev[11] !== last_RESULT_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[11] = RESULT_expected_prev[11];
	end
	if (
		( RESULT_expected_prev[12] !== 1'bx ) && ( RESULT_prev[12] !== RESULT_expected_prev[12] )
		&& ((RESULT_expected_prev[12] !== last_RESULT_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[12] = RESULT_expected_prev[12];
	end
	if (
		( RESULT_expected_prev[13] !== 1'bx ) && ( RESULT_prev[13] !== RESULT_expected_prev[13] )
		&& ((RESULT_expected_prev[13] !== last_RESULT_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[13] = RESULT_expected_prev[13];
	end
	if (
		( RESULT_expected_prev[14] !== 1'bx ) && ( RESULT_prev[14] !== RESULT_expected_prev[14] )
		&& ((RESULT_expected_prev[14] !== last_RESULT_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[14] = RESULT_expected_prev[14];
	end
	if (
		( RESULT_expected_prev[15] !== 1'bx ) && ( RESULT_prev[15] !== RESULT_expected_prev[15] )
		&& ((RESULT_expected_prev[15] !== last_RESULT_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[15] = RESULT_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU16BIT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a;
reg [15:0] b;
reg [2:0] opcode;
// wires                                               
wire Overflow;
wire [15:0] RESULT;

wire sampler;                             

// assign statements (if any)                          
ALU16BIT i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.opcode(opcode),
	.Overflow(Overflow),
	.RESULT(RESULT)
);
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b1;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b1;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b1;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b1;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b1;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b1;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b0;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b1;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b1;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b1;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b1;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b1;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b1;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b1;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
end 

ALU16BIT_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.opcode(opcode),
	.sampler_tx(sampler)
);

ALU16BIT_vlg_check_tst tb_out(
	.Overflow(Overflow),
	.RESULT(RESULT),
	.sampler_rx(sampler)
);
endmodule

