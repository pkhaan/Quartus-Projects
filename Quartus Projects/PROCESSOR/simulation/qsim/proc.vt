// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2018 20:22:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    proc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module proc_vlg_sample_tst(
	Clock,
	DIN,
	Reset,
	Run,
	sampler_tx
);
input  Clock;
input [15:0] DIN;
input  Reset;
input  Run;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or DIN or Reset or Run)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module proc_vlg_check_tst (
	BusWires,
	Done,
	sampler_rx
);
input [15:0] BusWires;
input  Done;
input sampler_rx;

reg [15:0] BusWires_expected;
reg  Done_expected;

reg [15:0] BusWires_prev;
reg  Done_prev;

reg [15:0] BusWires_expected_prev;
reg  Done_expected_prev;

reg [15:0] last_BusWires_exp;
reg  last_Done_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	BusWires_prev = BusWires;
	Done_prev = Done;
end

// update expected /o prevs

always @(trigger)
begin
	BusWires_expected_prev = BusWires_expected;
	Done_expected_prev = Done_expected;
end


// expected BusWires[ 15 ]
initial
begin
	BusWires_expected[15] = 1'bX;
end 
// expected BusWires[ 14 ]
initial
begin
	BusWires_expected[14] = 1'bX;
end 
// expected BusWires[ 13 ]
initial
begin
	BusWires_expected[13] = 1'bX;
end 
// expected BusWires[ 12 ]
initial
begin
	BusWires_expected[12] = 1'bX;
end 
// expected BusWires[ 11 ]
initial
begin
	BusWires_expected[11] = 1'bX;
end 
// expected BusWires[ 10 ]
initial
begin
	BusWires_expected[10] = 1'bX;
end 
// expected BusWires[ 9 ]
initial
begin
	BusWires_expected[9] = 1'bX;
end 
// expected BusWires[ 8 ]
initial
begin
	BusWires_expected[8] = 1'bX;
end 
// expected BusWires[ 7 ]
initial
begin
	BusWires_expected[7] = 1'bX;
end 
// expected BusWires[ 6 ]
initial
begin
	BusWires_expected[6] = 1'bX;
end 
// expected BusWires[ 5 ]
initial
begin
	BusWires_expected[5] = 1'bX;
end 
// expected BusWires[ 4 ]
initial
begin
	BusWires_expected[4] = 1'bX;
end 
// expected BusWires[ 3 ]
initial
begin
	BusWires_expected[3] = 1'bX;
end 
// expected BusWires[ 2 ]
initial
begin
	BusWires_expected[2] = 1'bX;
end 
// expected BusWires[ 1 ]
initial
begin
	BusWires_expected[1] = 1'bX;
end 
// expected BusWires[ 0 ]
initial
begin
	BusWires_expected[0] = 1'bX;
end 

// expected Done
initial
begin
	Done_expected = 1'bX;
end 
// generate trigger
always @(BusWires_expected or BusWires or Done_expected or Done)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BusWires = %b | expected Done = %b | ",BusWires_expected_prev,Done_expected_prev);
	$display("| real BusWires = %b | real Done = %b | ",BusWires_prev,Done_prev);
`endif
	if (
		( BusWires_expected_prev[0] !== 1'bx ) && ( BusWires_prev[0] !== BusWires_expected_prev[0] )
		&& ((BusWires_expected_prev[0] !== last_BusWires_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[0] = BusWires_expected_prev[0];
	end
	if (
		( BusWires_expected_prev[1] !== 1'bx ) && ( BusWires_prev[1] !== BusWires_expected_prev[1] )
		&& ((BusWires_expected_prev[1] !== last_BusWires_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[1] = BusWires_expected_prev[1];
	end
	if (
		( BusWires_expected_prev[2] !== 1'bx ) && ( BusWires_prev[2] !== BusWires_expected_prev[2] )
		&& ((BusWires_expected_prev[2] !== last_BusWires_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[2] = BusWires_expected_prev[2];
	end
	if (
		( BusWires_expected_prev[3] !== 1'bx ) && ( BusWires_prev[3] !== BusWires_expected_prev[3] )
		&& ((BusWires_expected_prev[3] !== last_BusWires_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[3] = BusWires_expected_prev[3];
	end
	if (
		( BusWires_expected_prev[4] !== 1'bx ) && ( BusWires_prev[4] !== BusWires_expected_prev[4] )
		&& ((BusWires_expected_prev[4] !== last_BusWires_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[4] = BusWires_expected_prev[4];
	end
	if (
		( BusWires_expected_prev[5] !== 1'bx ) && ( BusWires_prev[5] !== BusWires_expected_prev[5] )
		&& ((BusWires_expected_prev[5] !== last_BusWires_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[5] = BusWires_expected_prev[5];
	end
	if (
		( BusWires_expected_prev[6] !== 1'bx ) && ( BusWires_prev[6] !== BusWires_expected_prev[6] )
		&& ((BusWires_expected_prev[6] !== last_BusWires_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[6] = BusWires_expected_prev[6];
	end
	if (
		( BusWires_expected_prev[7] !== 1'bx ) && ( BusWires_prev[7] !== BusWires_expected_prev[7] )
		&& ((BusWires_expected_prev[7] !== last_BusWires_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[7] = BusWires_expected_prev[7];
	end
	if (
		( BusWires_expected_prev[8] !== 1'bx ) && ( BusWires_prev[8] !== BusWires_expected_prev[8] )
		&& ((BusWires_expected_prev[8] !== last_BusWires_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[8] = BusWires_expected_prev[8];
	end
	if (
		( BusWires_expected_prev[9] !== 1'bx ) && ( BusWires_prev[9] !== BusWires_expected_prev[9] )
		&& ((BusWires_expected_prev[9] !== last_BusWires_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[9] = BusWires_expected_prev[9];
	end
	if (
		( BusWires_expected_prev[10] !== 1'bx ) && ( BusWires_prev[10] !== BusWires_expected_prev[10] )
		&& ((BusWires_expected_prev[10] !== last_BusWires_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[10] = BusWires_expected_prev[10];
	end
	if (
		( BusWires_expected_prev[11] !== 1'bx ) && ( BusWires_prev[11] !== BusWires_expected_prev[11] )
		&& ((BusWires_expected_prev[11] !== last_BusWires_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[11] = BusWires_expected_prev[11];
	end
	if (
		( BusWires_expected_prev[12] !== 1'bx ) && ( BusWires_prev[12] !== BusWires_expected_prev[12] )
		&& ((BusWires_expected_prev[12] !== last_BusWires_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[12] = BusWires_expected_prev[12];
	end
	if (
		( BusWires_expected_prev[13] !== 1'bx ) && ( BusWires_prev[13] !== BusWires_expected_prev[13] )
		&& ((BusWires_expected_prev[13] !== last_BusWires_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[13] = BusWires_expected_prev[13];
	end
	if (
		( BusWires_expected_prev[14] !== 1'bx ) && ( BusWires_prev[14] !== BusWires_expected_prev[14] )
		&& ((BusWires_expected_prev[14] !== last_BusWires_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[14] = BusWires_expected_prev[14];
	end
	if (
		( BusWires_expected_prev[15] !== 1'bx ) && ( BusWires_prev[15] !== BusWires_expected_prev[15] )
		&& ((BusWires_expected_prev[15] !== last_BusWires_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BusWires[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BusWires_expected_prev);
		$display ("     Real value = %b", BusWires_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BusWires_exp[15] = BusWires_expected_prev[15];
	end
	if (
		( Done_expected_prev !== 1'bx ) && ( Done_prev !== Done_expected_prev )
		&& ((Done_expected_prev !== last_Done_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Done_expected_prev);
		$display ("     Real value = %b", Done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Done_exp = Done_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module proc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [15:0] DIN;
reg Reset;
reg Run;
// wires                                               
wire [15:0] BusWires;
wire Done;

wire sampler;                             

// assign statements (if any)                          
proc i1 (
// port map - connection between master ports and signals/registers   
	.BusWires(BusWires),
	.Clock(Clock),
	.DIN(DIN),
	.Done(Done),
	.Reset(Reset),
	.Run(Run)
);

// Clock
initial
begin
	Clock = 1'b0;
end 
// DIN[ 15 ]
initial
begin
	DIN[15] = 1'b0;
end 
// DIN[ 14 ]
initial
begin
	DIN[14] = 1'b0;
end 
// DIN[ 13 ]
initial
begin
	DIN[13] = 1'b0;
end 
// DIN[ 12 ]
initial
begin
	DIN[12] = 1'b0;
end 
// DIN[ 11 ]
initial
begin
	DIN[11] = 1'b0;
end 
// DIN[ 10 ]
initial
begin
	DIN[10] = 1'b0;
end 
// DIN[ 9 ]
initial
begin
	DIN[9] = 1'b0;
end 
// DIN[ 8 ]
initial
begin
	DIN[8] = 1'b0;
end 
// DIN[ 7 ]
initial
begin
	DIN[7] = 1'b0;
end 
// DIN[ 6 ]
initial
begin
	DIN[6] = 1'b0;
end 
// DIN[ 5 ]
initial
begin
	DIN[5] = 1'b0;
end 
// DIN[ 4 ]
initial
begin
	DIN[4] = 1'b0;
end 
// DIN[ 3 ]
initial
begin
	DIN[3] = 1'b0;
end 
// DIN[ 2 ]
initial
begin
	DIN[2] = 1'b0;
end 
// DIN[ 1 ]
initial
begin
	DIN[1] = 1'b0;
end 
// DIN[ 0 ]
initial
begin
	DIN[0] = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

// Run
initial
begin
	Run = 1'b0;
end 

proc_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.DIN(DIN),
	.Reset(Reset),
	.Run(Run),
	.sampler_tx(sampler)
);

proc_vlg_check_tst tb_out(
	.BusWires(BusWires),
	.Done(Done),
	.sampler_rx(sampler)
);
endmodule

